The archetecture of Virtual Reality can be broken down into first off, 2 parts, the Region (VirtualReality.exe), and the Server (VirtualReality.Server in grid mode, VirtualReality.exe in standalone). Both of these will be reviewed in detail in this document. The Region server is what runs what the client sees (prims) and deals with client movement. The Server deals with the hosting of assets (textures mainly) and inventory, among other things. 

Structures of Virtual Reality

Some of the main 'heavyweight' interfaces in Virtual Reality are the IScene, the ISimulationBase, and the IRegistryCore interfaces.
Each of these deal with a different part of Virtual Reality and implement the key pieces that make Virtual Reality run.

The IScene interface is the interface that implements what the client sees and deals with keeping the region running while the client is there.
It deals with running the heartbeat threads which keep the region running, syncronizing plugins, firing events, and connecting clients.
It implements the IRegistryCore interface, which will be discussed later, and this allows it to connect module interfaces.
It also fires events (through the Virtual RealityEventManager and the EventManager), that tell listening plugins things that are going on in the Scene so that they can act upon it.

The ISimulationBase is the base of both Virtual Reality and VirtualReality.Server. It is the first interface to be started when running Virtual Reality, and it deals with the loading of the configuration files, the console, 
and the startup of the IApplicationPlugins. It also creates the first instance of the IRegistryCore interface, and all plugins that register with the ISimulationBase will be accessable to any other 
plugins, even ones that have a different instance of IRegistryCore (as the lower level plugins are added to upper level implementations of IRegistryCore).

The IRegistryCore module keeps track of what plugins are running in Virtual Reality and VirtualReality.Server while it is running.
You can request this interface from most core interfaces, including both the IScene and the ISimulationBase, as it is the base of how the modular interface works.
It has the RegisterModuleInterface<T>(T Module) method, in which you add your module to the list so that other plugins can access it, and the RequestModuleInterface<T>() which gets the given module.
There are more advanced options such as stacking and the getting of more than one module at a time available as well.


Plugins in Virtual Reality

The Region Servers and the Server are both initially loaded with IApplicationPlugin extentions, which mainly deal with loading the regions and any IService plugins that are available.
The IApplicationPlugin plugins are the lowest level module that can be implemented in Virtual Reality, and they mainly deal with
* The setting up of basic pieces, such as the console
* Loading regions from different configurations
* Loading higher level (IService normally) plugins

Some examples of these would be the LoadRegionsPlugin, ServicesLoader, and the UpdaterPlugin plugins, all of which are in Virtual Reality and can be reviewed further in the document on IApplicationPlugins.
These load the initial pieces of Virtual Reality in both VirtualReality.exe and VirtualReality.Server.exe.
Best type of plugins to implement here:
Plugins that require startup before any plugins and Scenes are loaded, plugins that will start up/create regions, plugins that require access to low level application functions, such as reading config files and more.


The IService plugins are loaded after the IApplicationPlugins are loaded, and are mainly used to
* Load plugins that are used for large services, such as inventory and assets.
* Load plugins that are used for cross server communications

Some examples of these would be the InventoryService, AssetService, CapsService and many more.
These services are very important to the usage of Virtual Reality and run most of the core implementations of Virtual Reality.
Best type of plugins to implement here:
Plugins that require startup before most plugins are started, plugins that access the database regularly, plugins that will talk to other servers.


Closer look at one service and how it works
In this subsection, we will be looking at how the AssetService works (in a general way).

Standalone Mode:
The AssetService is loaded in VirtualReality.Server and connects to the database as one of the first plugins to load in the IService module group, as it is required by other plugins.
It is then free to serve assets to any other plugins that request it with an IRegistryCore instance, such as by this line of code "m_registry.RequestModuleInterface<IAssetService>();" 

Grid Mode:
The AssetService is loaded on VirtualReality.Server and connects to the database when in use. It is initialized as one of the first IService plugins as many other services require the use of the AssetService.
Besides setting up the AssetService on VirtualReality.Server, the AssetServiceConnector is started, which allows for remote connections to get/store assets in the AssetService.
When setting up the AssetServiceConnector, it requests the IAssetService (later when it is needed) from the IRegistryCore instance that it gets in the Start method of IService in the line "m_registry.RequestModuleInterface<IAssetService>();" 
Now that it has the instance of the AssetService, it is able to set up the HTTP handlers so that the regions in the grid can access the assets that it has.

On the Region side (VirtualReality.exe), the AssetServicesConnector starts up in place of the AssetService, which requests assets from the HTTP handlers set up prior to this in VirtualReality.Server.
After initially contacting VirtualReality.Server with the RegistrationURL set in the config files by the user, the URLs for all handlers that the region has access to are transfered, and the AssetServiceConnector will read its URL.
It can now access the AssetService on VirtualReality.Server securely and get/store assets as it needs.


The ISharedRegionStartupModule plugins
These plugins are loaded by the SceneManager, and deal with setting up low leve parts of the Scene. Some examples of these types of plugins would be the PhysicsInitializer and the BackupModule.
These deal with backup of prims, and the setup of the physics engine and estate services for the region. 
They load prims from the database into the Scene as well as load other region settings.
Best type of plugins to implement here:
Low level plugins that require setup before the Scene is loaded and may need to be used by other plugins, and do not need to do anything else but load parts of the Scene 


The IRegionModuleBase plugins (INonSharedRegionModule and ISharedRegionModule)
These plugins are loaded by the IApplicationPlugin RegionPluginsControllerPlugin, and they are region plugins only. They deal with setting up certain parts of the user experience, such as the profile and search plugins for the client.
They deal with setting up certain parts of the sim and implementing interfaces that the client will call to get/store information as well as setting up parts of the Scene so that it will run correctly.
Best type of plugins to implement here:
Plugins that deal with implementing client functions, and small scale scene functions, such as the Profile and Search plugins.
